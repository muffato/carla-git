#!/usr/bin/env perl

=head1 Description

Requesting resource requirements is annoyingly repetitive. Let this script help!
Interprets human-readable memory requirements and submits the correct interactive
bsub command.

=head2 Syntax

  ibsub [options] [command]

If no command is given, will run a shell.

=head2 -n [int]

Number of CPUs.
Default: 1.

=head2 -m [str]

Memory. Must be of the form "123M", "123MB", "45G", or "45GB" (lower case accepted).
Default: 1GB

=head2 -g [int]

Number of GPUs.
Default: 0.

=head2 -q [str]

Name of the queue.
Default: none if a command is given, "long" otherwise.

=cut

use strict;
use warnings;

use Getopt::Long qw(:config pass_through require_order);
use Pod::Usage;

my ($mem, $nuc, $queue, $gpu, $help);
$nuc = 1;

GetOptions(
	"mem|m=s"   => \$mem,
	"nuc|n=i"   => \$nuc,
	"gpu|g=i"   => \$gpu,
	"queue|q=s" => \$queue,
	"help|h"    => \$help,
);

pod2usage({-exitvalue => 0, -verbose => 3}) if $help;

my ($mult, $unit);
sub parse_mem {
	my $s = shift;
	if ( $s =~ /^([0-9\.]+)([gm])b?$/i ) {
		$unit = $1;
		$mult = lc($2) eq 'g' ? 1000 : 1;
		return 1;
	}
	return 0;
}

if ( $mem ) {
	unless ( parse_mem($mem) ) {
		die ( "Can't figure out memory statement. Please use e.g. 2gb, 4.5gb, 500mb" );
	}
}
# No -m option, give the first ARGV argument a chance
elsif ( @ARGV && parse_mem($ARGV[0]) ) {
	shift @ARGV;
}
else {
	# 1 GB by default
	$unit = 1;
	$mult = 1000;
}

my $mb_req = $unit * $mult;

my $gpu_select = '';
my $gpu_rusage = '';
my @gpu_args;
if ($gpu) {
	$gpu_select = 'ngpus>0 && ';
	$gpu_rusage = "ngpus_physical=${gpu}.00,";
	@gpu_args = ('-gpu', 'mode=exclusive_process');
}

my @cmd;
if (@ARGV) {
	@cmd = @ARGV;
} else {
	$queue //= 'long';
	push @cmd, $ENV{SHELL};
}

my @bsub = ('bsub', "-M$mb_req", qq{-R"select[${gpu_select}mem>$mb_req] rusage[${gpu_rusage}mem=$mb_req] span[hosts=1]"}, @gpu_args, '-n', $nuc);
push @bsub, '-q', $queue if $queue;
if ($0 =~ /\/ibsub$/) {
	push @bsub, '-Is';
} else {
	#Â Add -o /dev/null automatically since that's what I usually want
	# NB: the grep is not 100% accurate, but it's good enough
	unless (grep {/^-o/} @cmd) {
		push @bsub, '-o', '/dev/null';
	}
}
push @bsub, @cmd;
print "@bsub\n";
exec(@bsub);
